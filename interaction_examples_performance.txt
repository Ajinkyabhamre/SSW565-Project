Improve performance of security group DB query The _select_ips_for_remote_group method was joining the IP allocation, port, allowed address pair, and security group tables together in a single query. Additionally, it was loading all of the port columns and using none of them. This resulted in a very expensive query with no benefit. This patch eliminates the unnecessary use of the port table by joining the IP allocation table directly to the security groups and allowed address pairs tables. In local testing of the method, this sped it up by an order of magnitude. Closes-Bug: #1373851 Change-Id: I12899413004838d2d22b691f1e2f3b18f7ec2c27 (cherry picked from commit 04df85b6e5a098f8f55bb82f04d9769763beb487)
Add ipset to security group Add ipset to security group for improving the performance of the security group. Change-Id: I85c24d5b8f1279bb5bb9c41d4912b29996baa33f Supports-blueprint: add-ipset-to-security
Add ipset to security group Add ipset to security group for improving the performance of the security group. Change-Id: I02dad0543dd4346efb4e8bb4ee458c597d6d4550 Supports-blueprint: add-ipset-to-security
Security: System security option is now spectre_meltdown_low Most of the v1 mitigation is baked into the kernel and not optional. The swapgs barriers are, however, optional. They have a negative performance impact so we disable them by using the nospectre_v1 kernel bootarg. This leaves the system security option spectre_meltdown_v1 too confusing, so we rename it. Partial-Bug: 1860193 Depends-On: https://review.opendev.org/#/c/704406 Change-Id: I772b1238132bd3e2e019865e3ee08811688400ed Signed-off-by: Jim Somerville <Jim.Somerville@windriver.com>
WIP: log when loading security group driver See how bad https://review.openstack.org/#/c/325684/ (newton) regressed the cache performance benefit of https://review.openstack.org/#/c/256073/ (mitaka). Change-Id: I3364bc09234ffe65f48aeee2415d109ad3f7b6ae
Add security mirror override for debian-minimal Set the security mirror URL independently in the debian-minimal element, since overriding this is normally a bad idea; long-running servers should use the official security repository to reduce the time to receive critical updates, but this still needs to be overridable for situations like short-lived CI nodes where all packages are expected to come from a specific mirror for performance and consistency. Change-Id: I71a025424e3073d05c2591b458aa81162b4e7008
Revert "Allow sharing of security groups via RBAC mechanism" This reverts commit 5e0fc3d2da6fbc5154debcc4a98bb8b6419326f9. As show in bug [1], this implementation causes a huge performance regression. Therefore this patch proposes reverting for now. [1] https://bugs.launchpad.net/neutron/+bug/1830679 Change-Id: I2f13ecad81d7624d2720f4c526b6bb4c620fe9fe
Improve security group rule create performance [1] says serializing the method with lockutils improves the API performance. When tried that on security group rule create, by creating 300 security group rules asynchronously, max time taken for the API to finish was 51 seconds[2] comapred to 390 seconds[3] taken for the API without this change. Also all the 300 calls were succesful with this patch, whereas some were failing with the existing code. [1] https://review.openstack.org/#/c/534449/ [2] http://paste.openstack.org/show/743043/ [3] http://paste.openstack.org/show/743042/ Change-Id: I2045d7ff0a36a28311c09c667b2841487dd81d71
Make security group API reads and deletes faster. 1. Previous reviews for reducing the amount of data had a high impact on the OVO implementation, but only the SG's have this child data performance problem. Let's try a lower impact method for providing both a shallow and deep OVO SG object, via two objects. 2. Use shallow object where possible. 3. Use lazy sqlalchemy query for rules. Change-Id: Idd638740967ff8edd44e476fe0a0bcf6f23cfd22
Improve ovsvapp performance by reducing RPC calls from agents for security group updates. Agents will not request refresh only for own devices and server will fanout response to all members of the cluster. Change-Id: I0258b5916ac4c5e55c9c65dd3610907076b51d49
Fix list security groups performance with RBAC After change [1], if the system has a high number of security groups with no associated RBAC entries, a non admin user owning only one security group will experience unacceptable response times when listing her security groups. Change [1] added methods get_object and get_objects to class RbacNeutronDbObjectMixin in neutron.objects.rbac_db, which retrieve with and admin context all the objects (networks, subnets or security groups) in the DB and then decide in memory whether the project that made the query has access to them or not, based on their associated RBAC policies. This change proposes to remove those methods and revert to their counterparts in NeutronDbObject (neutron.objects.base), which use a DB query scoped to the project to retrieve the objects based on their associated RBAC policies by calling [2]. In this way, the potential number of objects that are retrieved from the DB and that have to be converted to OVOs is greatly reduced, improving significantly the response time to the user. [1] https://review.opendev.org/#/c/635311 [2] https://github.com/openstack/neutron-lib/blob/7a58374fde64fdc14e327940dde6bea4a8a39345/neutron_lib/db/model_query.py#L100 Change-Id: Idd303778d83089da8fbeff40e3dda2bd19008d8e Closes-Bug: #1830679 (cherry picked from commit a240c68022d96c8639652cbdf57e707e68fb2a88)
Fix list security groups performace with RBAC After change [1], if the system has a high number of security groups with no associated RBAC entries, a non admin user owning only one security group will experience unacceptable response times when listing her security groups. This patch proposes an optimization whereby we only check the RBAC entries of a security group if we know it has such entries. This is likely going to be the first in a series of patches aimed at improving the performance of RBAC code for cases when associated resources exist in high numbers. [1] https://review.opendev.org/#/c/635311 Change-Id: Idd303778d83089da8fbeff40e3dda2bd19008d8e Partial-Bug: #1830679
Fix performance regression adding rules to security groups Sometime between liberty and pike, adding rules to SG's got slow, and slower with every rule. Streamline the rule create path, and get close to the old performance back. Two performance fixes: 1. Get rid of an n^2 duplicate check, using a hash table instead, on bulk creates. This is more memory intensive than the previous loop, but usable far past where the other becomes too slow to be useful. 2. Use an object existence check in a few places where we do not want to load all of the child rules. Co-Authored-By: William Hager <whager@salesforce.com> Change-Id: I34e41a128f28211f2e7ab814a2611ce22620fcf3 Closes-bug: 1810563 (cherry picked from commit 2eb31f84c9a6c9fc6340819f756a7a82cbf395f3)
Fix performance regression adding rules to security groups Sometime between liberty and pike, adding rules to SG's got slow, and slower with every rule. Streamline the rule create path, and get close to the old performance back. Two performance fixes: 1. Get rid of an n^2 duplicate check, using a hash table instead, on bulk creates. This is more memory intensive than the previous loop, but usable far past where the other becomes too slow to be useful. 2. Use an object existence check in a few places where we do not want to load all of the child rules. Co-Authored-By: William Hager <whager@salesforce.com> Change-Id: I34e41a128f28211f2e7ab814a2611ce22620fcf3 Closes-bug: 1810563 (cherry picked from commit 2eb31f84c9a6c9fc6340819f756a7a82cbf395f3)
Fix performance regression adding rules to security groups Sometime between liberty and pike, adding rules to SG's got slow, and slower with every rule. Streamline the rule create path, and get close to the old performance back. Two performance fixes: 1. Get rid of an n^2 duplicate check, using a hash table instead, on bulk creates. This is more memory intensive than the previous loop, but usable far past where the other becomes too slow to be useful. 2. Use an object existence check in a few places where we do not want to load all of the child rules. Co-Authored-By: William Hager <whager@salesforce.com> Change-Id: I34e41a128f28211f2e7ab814a2611ce22620fcf3 Closes-bug: 1810563 (cherry picked from commit 2eb31f84c9a6c9fc6340819f756a7a82cbf395f3)
Fix performance regression adding rules to security groups Sometime between liberty and pike, adding rules to SG's got slow, and slower with every rule. Streamline the rule create path, and get close to the old performance back. The most controversial change is likely using the sqla db models to write the rules instead of the neutron objects. Restoring that part loses some performance, but keeps most of it, so if that interface is important, we can do that. Change-Id: I34e41a128f28211f2e7ab814a2611ce22620fcf3 Closes-bug: 1810563
Fix no ACCEPT event can get for security group logging Currently, we cannot get ACCEPT packet log because there are some changed related to ovs firewall code since ovs firewall logging has been merged. Regarding to performance perspective, we only log first accepted packet. So we only need to forward first accepted packet of each connection session to table 91 and table 92. So this patch fixes these issues. Closes-Bug: #1782576 Change-Id: Ib6ced838a7ec6d5c459a8475318556001c31bdf0 (cherry picked from commit ced78395a7952d0e616055892645fd2a6165833f)
Fix no ACCEPT event can get for security group logging Currently, we cannot get ACCEPT packet log because there are some changed related to ovs firewall code since ovs firewall logging has been merged. Regarding to performance perspective, we only log first accepted packet. So we only need to forward first accepted packet of each connection session to table 91 and table 92. So this patch fixes these issues. Closes-Bug: #1782576 Change-Id: Ib6ced838a7ec6d5c459a8475318556001c31bdf0 (cherry picked from commit ced78395a7952d0e616055892645fd2a6165833f)
Remove iptables nat and mangle rules for security group There is no need to add iptables nat and mangle rules for security group, these rules will slow down network performance especially when using 6wind Virtual Accelerator. Conflicts: neutron/agent/linux/iptables_firewall.py Change-Id: I1d5748394665535d114e8d942a68d5bd43927058 Closes-Bug: #1650466 (cherry picked from commit 22352f5d4c595e373bb73c8bc590e6d3e621dac0)
Remove iptables nat and mangle rules for security group There is no need to add iptables nat and mangle rules for security group, these rules will slow down network performance especially when using 6wind Virtual Accelarator. Change-Id: I1d5748394665535d114e8d942a68d5bd43927058 Closes-Bug: #1650466
6wind-virtual-accelerator-plugin: implement security group deactivation This patch reworks plugin to: - remove the possibility to disable ipset since starting from Virtual Accelerator 1.4 ipset are fully supported. - allow neutron security groups deactivation to benefit from better performances. Disabling security groups needs (different) configurations on controller and compute nodes. For this reason this patch moves all the node specific neutron configuration in specific tasks for a better separation of code. Signed-off-by: Francesco Santoro <francesco.santoro@6wind.com> Closes-bug: #1631953 Change-Id: I030d41751811831144be0b640ae19e56f22a8f0b
NSX|P: improve security rules creation performance Call the api under transaction without child rules Depends-on: Ib6361575642fa96a93dd49107ece1f120a6e61b2 Change-Id: Ibb891b2c31e756b2813d55635a80e5a0ac658ae8
NSX|P: improve security rules creation performance Call the api under transaction without child rules Depends-on: Ib6361575642fa96a93dd49107ece1f120a6e61b2 Change-Id: Ibb891b2c31e756b2813d55635a80e5a0ac658ae8
NSX|P: improve security rules creation performance Call the api under transaction without child rules Depends-on: Ib6361575642fa96a93dd49107ece1f120a6e61b2 Change-Id: Ibb891b2c31e756b2813d55635a80e5a0ac658ae8
Improve security policy update rules with transactions Use the policy 'rules' attribute instead of adding child rules. This is expected to have better performance on the NSX side. This patch re-itroduce the fix from: I213616a8b47f11adb1a897568746885f3e77078c but this time with a flag to not break stuff Change-Id: Ib6361575642fa96a93dd49107ece1f120a6e61b2
Improve security policy update rules with transactions Use the policy 'rules' attribute instead of adding child rules. This is expected to have better performance on the NSX side. This patch re-itroduce the fix from: I213616a8b47f11adb1a897568746885f3e77078c but this time with a flag to not break stuff Change-Id: Ib6361575642fa96a93dd49107ece1f120a6e61b2
Improve security policy update rules with transactions Use the policy 'rules' attribute instead of adding child rules. This is expected to have better performance on the NSX side. This patch re-itroduce the fix from: I213616a8b47f11adb1a897568746885f3e77078c but this time with a flag to not break stuff Change-Id: Ib6361575642fa96a93dd49107ece1f120a6e61b2
Improve security policy update rules with transactions Use the policy 'rules' attribute instead of adding child rules. This is expected to have better performance on the NSX side. Change-Id: I213616a8b47f11adb1a897568746885f3e77078c
Improve security policy update rules with transactions Use the policy 'rules' attribute instead of adding child rules. This is expected to have better performance on the NSX side. Change-Id: I213616a8b47f11adb1a897568746885f3e77078c
Improve security policy update rules with transactions Use the policy 'rules' attribute instead of adding child rules. This is expected to have better performance on the NSX side. Change-Id: I213616a8b47f11adb1a897568746885f3e77078c
lb-agent: handle security group updates in main loop Patch I1574544734865506ff5383404516cc9349c16ec4 introduced deferring firewall refreshes to the main loop of the ovs-agent to improve performance. This patch enables the same on the linuxbridge agent. Change-Id: Ia8fe229910d2be718da52cb341be163b86ace571 Closes-Bug: #1368281
Avoid double-hopping deletes for security group rules There is no need to get and delete; we can delete with one bullet. This will most likely have quite a decent performance benefit overall. The patch preserves the existing logic of raising and error on the missing element; a test was added to spur up the coverage. Related-bug: #1444112 Change-Id: Iaef77bd3f7775ed91d374838fb5488d925b4062c (cherry picked from commit 05a9f16257c2953bf40d11ca2a2f9651ba4e86b2)
Avoid double-hopping deletes for security group rules There is no need to get and delete; we can delete with one bullet. This will most likely have quite a decent performance benefit overall. The patch preserves the existing logic of raising and error on the missing element; a test was added to spur up the coverage. Related-bug: #1444112 Change-Id: Iaef77bd3f7775ed91d374838fb5488d925b4062c
Improve performance of security group DB queries The _select_ips_for_remote_group method was joining the IP allocation, port, allowed address pair, and security group tables together in a single query. Additionally, it was loading all of the port columns and using none of them. This resulted in a very expensive query with no benefit. This patch addresses that method by changing it into two queries. The first directly joins the security groups association table to the IP allocation table to get the IP addresses. The second directly joins the address pairs table to the security groups association table to get the IP addresses of the address pairs. In local testing of the method, this sped it up by an order of magnitude. This patch also eliminates several other unnecessary loads of data from the ports table in the same module. Closes-Bug: #1373851 Change-Id: I12899413004838d2d22b691f1e2f3b18f7ec2c27
Reduce security group db calls to neutron server Within ovs agent daemon loop, prepare_devices_filter will impose heavy workloads to neutron server in order to retrieve the security groups message to apply firewall rules. If agent is configured to use Noopfirewall driver or security groups are disabled, there is no need for loading the rules from server and refreshing the firewalls. This will reduce the number of db calls and improve performance for neutron server in this case. Change-Id: Id244aab3cac37fc6ed3dc05cbee91cdf9e34d9cc Closes-Bug: #1365806 (cherry picked from commit 524981cce05a9b365036c0a1e9810036936d3d5b)
Improve performance of security group DB query The _select_ips_for_remote_group method was joining the IP allocation, port, allowed address pair, and security group tables together in a single query. Additionally, it was loading all of the port columns and using none of them. This resulted in a very expensive query with no benefit. This patch eliminates the unnecessary use of the port table by joining the IP allocation table directly to the security groups and allowed address pairs tables. In local testing of the method, this sped it up by an order of magnitude. Closes-Bug: #1373851 Change-Id: I12899413004838d2d22b691f1e2f3b18f7ec2c27 (cherry picked from commit 04df85b6e5a098f8f55bb82f04d9769763beb487)
Avoid impose security groups db calls to neutron-server under Noopfirewall driver Within ovs agent daemon loop, prepare_devices_filter will impose heavy workloads to neutron server in order to retrieve the security groups message to apply firewall rules. If agent configuration with Noopfirewall driver or security group disabled, there is no need for loading the rules from server and refreshing the firewalls. This will reduce the db calls and improve performance for neutron server in this case. Change-Id: Id244aab3cac37fc6ed3dc05cbee91cdf9e34d9cc Closes-Bug: #1365806
Add ipset to security group Add ipset to security group for improving the performance of the security group. Change-Id: I6ff0ac519d0b9034d3bb5270885ed3cc1805674d Supports-blueprint: add-ipset-to-security DocImpact
Add security group to large_ops test There have been some issues with performance around security groups in the past. Lets make sure they don't exist. We gate on test_large_ops as part of gate-tempest-devstack-vm-large-ops Change-Id: Ib655deab9fc12df969b47552d7d8edc999c0d06a
Improve metadata server performance with large security groups Don't include the rules in the SG fetch in the metadata server, since we don't need them there, and with >1000 rules, it starts to get really slow, especially in Pike and later. Closes-Bug: #1851430 Co-Authored-By: Doug Wiegley <dougwig@parkside.io> Co-Authored-By: Matt Riedemann <mriedem.os@gmail.com> Conflicts: nova/tests/unit/network/security_group/test_neutron_driver.py NOTE(mriedem): The conflict is due to not having change I31c9ea8628c6f3985f8e9118d9687bbfb8789b68 in Pike. Change-Id: I7de14456d04370c842b4c35597dca3a628a826a2 (cherry picked from commit eaf16fdde59a14fb38df669b21a911a0c2d2576f) (cherry picked from commit 418af2d865809cfa907678f883dae07f4f31baa2) (cherry picked from commit fec95a2e4f763e15193504483383f918feb3e636) (cherry picked from commit 38b2f68a17533e839819e654825613aefd4effd4) (cherry picked from commit 00d438adb325610a04af9f8f18cdb1c622df5418)
Security: System security option includes nospectre_v1 Most of the v1 mitigation is baked into the kernel and not optional. The swapgs barriers are, however, optional. They have a negative performance impact so we disable them by using the nospectre_v1 kernel bootarg. Partial-Bug: 1860193 Depends-On: https://review.opendev.org/#/c/705300 Signed-off-by: Jim Somerville <Jim.Somerville@windriver.com> (cherry picked from commit b7c6c2a1681a057a7c3a2a9b1700cb2d92f18627) Change-Id: Ifbeaa0ac8b60addc5aefd63578ed4facebbd9b22
Security: Add nospectre_v1 to the security params Most of the v1 mitigation is baked into the kernel and not optional. The swapgs barriers are, however, optional. They have a negative performance impact so we disable them by using the nospectre_v1 kernel bootarg. Partial-Bug: 1860193 Depends-On: https://review.opendev.org/#/c/705300 Signed-off-by: Jim Somerville <Jim.Somerville@windriver.com> (cherry picked from commit 950670ac1f0bfaa43e29eeb3ffda71a94de66520) Change-Id: I8472e7fc4fbf5b3e01b56b79eba7feda315d29cf
Security: System security option is now spectre_meltdown_low Most of the v1 mitigation is baked into the kernel and not optional. The swapgs barriers are, however, optional. They have a negative performance impact so we disable them by using the nospectre_v1 kernel bootarg. This leaves the system security option spectre_meltdown_v1 too confusing, so we have renamed it. Partial-Bug: 1860193 Depends-On: https://review.opendev.org/#/c/704406 Change-Id: I6281166c53b13124800b4061ebe08f85d5175d6a Signed-off-by: Jim Somerville <Jim.Somerville@windriver.com>
Security: Add nospectre_v1 to the security params Most of the v1 mitigation is baked into the kernel and not optional. The swapgs barriers are, however, optional. They have a negative performance impact so we disable them by using the nospectre_v1 kernel bootarg. Partial-Bug: 1860193 Depends-On: https://review.opendev.org/#/c/704406 Change-Id: Iaa11ba3f430fc064ebda679cf290474d3be413da Signed-off-by: Jim Somerville <Jim.Somerville@windriver.com>
[DNM] Checking performance after disabling security Change-Id: If6f0bc02db6932aa8f367e38cc82df85063eaf87
Improve metadata server performance with large security groups Don't include the rules in the SG fetch in the metadata server, since we don't need them there, and with >1000 rules, it starts to get really slow, especially in Pike and later. Closes-Bug: #1851430 Co-Authored-By: Doug Wiegley <dougwig@parkside.io> Co-Authored-By: Matt Riedemann <mriedem.os@gmail.com> Change-Id: I7de14456d04370c842b4c35597dca3a628a826a2 (cherry picked from commit eaf16fdde59a14fb38df669b21a911a0c2d2576f) (cherry picked from commit 418af2d865809cfa907678f883dae07f4f31baa2) (cherry picked from commit fec95a2e4f763e15193504483383f918feb3e636) (cherry picked from commit 38b2f68a17533e839819e654825613aefd4effd4)
Cache security group driver Change I0932c652fb455fe10239215a93e183ea947234e3 from Mitaka was a performance improvement to cache the loaded security group driver since the API calls get_openstack_security_group_driver a lot. That performance fix was regressed with change Ia4a8d9954bf456253101b936f8b4ff513aaa73b2 in Newton. This caches the loaded security group driver once again. This is pretty similar to the original change except simpler since we don't have to account for the skip_policy_check flag. Change-Id: Icacc763f19db6dc90e72af32e17d480775ad5edf Closes-Bug: #1825018 (cherry picked from commit 0461921d9e5313c3e92b039b90f713ed961e20c8) (cherry picked from commit 3ea6a7f79b0ad8a12c8ccfdeda838784c7922e63) (cherry picked from commit 99048af872743638b3628555e96351e00bf1eb7e)
Improve metadata server performance with large security groups Don't include the rules in the SG fetch in the metadata server, since we don't need them there, and with >1000 rules, it starts to get really slow, especially in Pike and later. Closes-Bug: #1851430 Co-Authored-By: Doug Wiegley <dougwig@parkside.io> Co-Authored-By: Matt Riedemann <mriedem.os@gmail.com> Change-Id: I7de14456d04370c842b4c35597dca3a628a826a2 (cherry picked from commit eaf16fdde59a14fb38df669b21a911a0c2d2576f) (cherry picked from commit 418af2d865809cfa907678f883dae07f4f31baa2) (cherry picked from commit fec95a2e4f763e15193504483383f918feb3e636)
Improve metadata server performance with large security groups Don't include the rules in the SG fetch in the metadata server, since we don't need them there, and with >1000 rules, it starts to get really slow, especially in Pike and later. Closes-Bug: #1851430 Co-Authored-By: Doug Wiegley <dougwig@parkside.io> Co-Authored-By: Matt Riedemann <mriedem.os@gmail.com> Change-Id: I7de14456d04370c842b4c35597dca3a628a826a2 (cherry picked from commit eaf16fdde59a14fb38df669b21a911a0c2d2576f) (cherry picked from commit 418af2d865809cfa907678f883dae07f4f31baa2)
Cache security group driver Change I0932c652fb455fe10239215a93e183ea947234e3 from Mitaka was a performance improvement to cache the loaded security group driver since the API calls get_openstack_security_group_driver a lot. That performance fix was regressed with change Ia4a8d9954bf456253101b936f8b4ff513aaa73b2 in Newton. This caches the loaded security group driver once again. This is pretty similar to the original change except simpler since we don't have to account for the skip_policy_check flag. Change-Id: Icacc763f19db6dc90e72af32e17d480775ad5edf Closes-Bug: #1825018 (cherry picked from commit 0461921d9e5313c3e92b039b90f713ed961e20c8) (cherry picked from commit 3ea6a7f79b0ad8a12c8ccfdeda838784c7922e63)
Cache security group driver Change I0932c652fb455fe10239215a93e183ea947234e3 from Mitaka was a performance improvement to cache the loaded security group driver since the API calls get_openstack_security_group_driver a lot. That performance fix was regressed with change Ia4a8d9954bf456253101b936f8b4ff513aaa73b2 in Newton. This caches the loaded security group driver once again. This is pretty similar to the original change except simpler since we don't have to account for the skip_policy_check flag. Change-Id: Icacc763f19db6dc90e72af32e17d480775ad5edf Closes-Bug: #1825018 (cherry picked from commit 0461921d9e5313c3e92b039b90f713ed961e20c8)
Cache security group driver Change I0932c652fb455fe10239215a93e183ea947234e3 from Mitaka was a performance improvement to cache the loaded security group driver since the API calls get_openstack_security_group_driver a lot. That performance fix was regressed with change Ia4a8d9954bf456253101b936f8b4ff513aaa73b2 in Newton. This caches the loaded security group driver once again. This is pretty similar to the original change except simpler since we don't have to account for the skip_policy_check flag. Change-Id: Icacc763f19db6dc90e72af32e17d480775ad5edf Closes-Bug: #1825018
Improve metadata server performance with large security groups Don't include the rules in the SG fetch in the metadata server, since we don't need them there, and with >1000 rules, it starts to get really slow, especially in Pike and later. Closes-Bug: #1851430 Co-Authored-By: Doug Wiegley <dougwig@parkside.io> Co-Authored-By: Matt Riedemann <mriedem.os@gmail.com> Change-Id: I7de14456d04370c842b4c35597dca3a628a826a2 (cherry picked from commit eaf16fdde59a14fb38df669b21a911a0c2d2576f)
Improve metadata server performance with large security groups Don't include the rules in the SG fetch in the metadata server, since we don't need them there, and with >1000 rules, it starts to get really slow, especially in Pike and later. Change-Id: I7de14456d04370c842b4c35597dca3a628a826a2